name: CI

on:
  push:
    branches: [ master, main, develop, feature/* ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
            build_command: make -j$(nproc)
          - os: macos-latest  
            cmake_generator: "Unix Makefiles"
            build_command: make -j$(sysctl -n hw.ncpu)
          - os: windows-latest
            cmake_generator: "MinGW Makefiles"
            build_command: mingw32-make -j4
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache CMake dependencies
      uses: actions/cache@v4
      with:
        path: |
          GameEngine/build/_deps
          GameEngine/build/.deps_cache
          GameEngine/build/CMakeCache.txt
          GameEngine/build/CMakeFiles
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-cmake-
    
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: |
          ~/.ccache
          ~/Library/Caches/ccache
          ~\AppData\Local\ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxxf86vm-dev \
          libasound2-dev \
          ccache
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Update Homebrew and install/upgrade dependencies
        brew update || true
        
        # Install build tools
        brew install --formula cmake ccache || brew upgrade cmake ccache || true
        
        # Install raylib dependencies
        brew install --formula glfw openal-soft || brew upgrade glfw openal-soft || true
        
        # Show installed versions
        echo "=== Installed versions ==="
        cmake --version
        ccache --version
        echo "GLFW: $(brew list --versions glfw || echo 'not installed')"
        echo "OpenAL: $(brew list --versions openal-soft || echo 'not installed')"
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw cmake -y
        echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Configure ccache
      run: |
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
        # On macOS, ensure ccache is in PATH
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        fi
        which ccache && ccache --version && ccache --zero-stats || true
    
    - name: Configure CMake
      run: |
        cd GameEngine
        mkdir -p build
        cd build
        # Additional flags for macOS
        CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release"
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Use ccache wrappers on macOS
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          # Ensure we can find OpenGL on macOS
          CMAKE_ARGS="$CMAKE_ARGS -DOPENGL_INCLUDE_DIR=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks"
        else
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
        fi
        cmake .. -G "${{ matrix.cmake_generator }}" $CMAKE_ARGS
    
    - name: Build
      run: |
        cd GameEngine/build
        ${{ matrix.build_command }}
    
    - name: Show ccache statistics
      run: |
        ccache --show-stats || true
    
    - name: Run Unit Tests
      run: |
        cd GameEngine/build
        make test-unit || true
      continue-on-error: false
    
    - name: Run Integration Tests
      run: |
        cd GameEngine/build
        make test-integration || true
      continue-on-error: false
    
    - name: Run System Tests
      run: |
        cd GameEngine/build
        make test-system || true
      continue-on-error: false
    
    - name: Run All Tests
      run: |
        cd GameEngine/build
        
        # Show environment info for debugging
        echo "=== Build Environment ==="
        echo "OS: ${{ matrix.os }}"
        echo "CMAKE_GENERATOR: ${{ matrix.cmake_generator }}"
        echo "PWD: $(pwd)"
        echo "CMake version: $(cmake --version | head -1)"
        
        # Check if game_engine was built
        if [ -f "game_engine" ] || [ -f "game_engine.exe" ]; then
          echo "✅ game_engine executable found"
        else
          echo "❌ game_engine executable not found!"
          ls -la
          exit 1
        fi
        
        # Run tests with better error handling
        if ! make all-tests; then
          echo "❌ Tests failed with exit code: $?"
          
          # Try to find and show log files
          echo "\n=== Searching for log files ==="
          find . -name "*.log" -type f -mtime -1 | head -10
          
          # Show test results if available
          if [ -f "test_results.json" ]; then
            echo "\n=== Test Results ==="
            cat test_results.json || true
          fi
          
          exit 1
        fi
    
    - name: List test artifacts for debugging
      if: always()
      run: |
        echo "=== Searching for test artifacts ==="
        echo "In build directory:"
        find GameEngine/build -name "test_results.json" -o -name "test_log_*.log" 2>/dev/null || true
        echo -e "\nIn tests directory:"
        find GameEngine/tests -name "test_results.json" -o -name "test_log_*.log" 2>/dev/null || true
        echo -e "\nAll log files:"
        find GameEngine -name "*.log" -type f -mtime -1 2>/dev/null | head -20 || true
      continue-on-error: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: |
          GameEngine/build/test_results.json
          GameEngine/build/test_log_*.log
          GameEngine/build/logs/test_log_*.log
          GameEngine/tests/test_results.json
          GameEngine/tests/test_log_*.log
          GameEngine/tests/logs/test_log_*.log
        if-no-files-found: warn
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: game_engine-${{ matrix.os }}
        path: |
          GameEngine/build/game_engine*
          GameEngine/build/*.exe
          GameEngine/build/*.app
        if-no-files-found: error

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install code quality tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck
        
        # Show tool versions
        echo "=== Tool versions ==="
        clang-format --version
        clang-tidy --version
        cppcheck --version
    
    - name: Run clang-format check
      run: |
        echo "=== Checking code formatting with clang-format ==="
        cd GameEngine
        
        # Find all source files
        FILES=$(find src -name "*.cpp" -o -name "*.h" -o -name "*.hpp" 2>/dev/null | sort)
        
        if [ -z "$FILES" ]; then
          echo "⚠️ No source files found to check"
          exit 0
        fi
        
        echo "Found $(echo "$FILES" | wc -l) files to check"
        
        # Check each file
        FAILED=0
        for file in $FILES; do
          if ! clang-format --dry-run --Werror "$file" 2>&1; then
            echo "❌ Formatting error in: $file"
            FAILED=1
          fi
        done
        
        if [ $FAILED -eq 1 ]; then
          echo ""
          echo "❌ Code formatting issues found!"
          echo "To fix, run: find src -name '*.cpp' -o -name '*.h' -o -name '*.hpp' | xargs clang-format -i"
          exit 1
        else
          echo "✅ Code formatting is correct"
        fi
    
    - name: Run clang-tidy
      run: |
        echo "=== Running clang-tidy static analysis ==="
        cd GameEngine
        mkdir -p build-tidy
        cd build-tidy
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
        find ../src -name "*.cpp" | \
        xargs clang-tidy -p . --config-file=../../.clang-tidy 2>&1 | tee ../clang-tidy.log
        
        # Check for errors (not just warnings)
        if grep -E "error:|warning:" ../clang-tidy.log; then
          echo "⚠️ clang-tidy found issues"
        fi
    
    - name: Run cppcheck
      run: |
        echo "=== Running cppcheck static analysis ==="
        cppcheck --enable=warning,style,performance,portability \
                 --suppress=missingInclude \
                 --suppress=unknownMacro \
                 --error-exitcode=1 \
                 --inline-suppr \
                 --quiet \
                 GameEngine/src 2>&1 | tee cppcheck.log
        
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "❌ cppcheck found issues!"
          cat cppcheck.log
          exit 1
        else
          echo "✅ cppcheck passed"
        fi
    
    - name: Upload code quality reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          format-check.log
          GameEngine/clang-tidy.log
          cppcheck.log
        if-no-files-found: ignore