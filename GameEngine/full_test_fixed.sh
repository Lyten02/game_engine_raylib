#!/bin/bash

# full_test_smart.sh - –£–º–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è game
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./full_test_smart.sh [--force-rebuild]

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ –Ω–∞—á–∞–ª–µ
PROJECT_ROOT=$(pwd)
if [[ ! -f "CMakeLists.txt" ]]; then
    if [[ -f "../CMakeLists.txt" ]]; then
        PROJECT_ROOT=$(cd .. && pwd)
    else
        echo "‚ùå ERROR: Cannot find CMakeLists.txt"
        exit 1
    fi
fi

echo "üöÄ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤: $PROJECT_ROOT"

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_ROOT"
mkdir -p logs

# –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú –ø—É—Ç–µ–º
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="$PROJECT_ROOT/logs/full_test_${TIMESTAMP}.log"

# –°–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª
echo "üöÄ Starting smart test cycle at $(date)" > "$LOG_FILE"
echo "‚úÖ Log file created: $LOG_FILE"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "$message"
    echo "$message" >> "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥
run_command() {
    local cmd="$1"
    local description="$2"
    
    log "========================================"
    log "Starting: $description"
    log "Command: $cmd"
    log "========================================"
    
    if eval "$cmd" 2>&1 | tee -a "$LOG_FILE"; then
        log "‚úÖ SUCCESS: $description completed"
        return 0
    else
        log "‚ùå FAILED: $description failed"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
get_git_info() {
    log "üìã Collecting Git repository information..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log "‚ö†Ô∏è  Not a Git repository"
        return 1
    fi
    
    log "========================================"
    log "üîç GIT REPOSITORY STATUS"
    log "========================================"
    
    # –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
    local current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')
    log "Branch: $current_branch"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    local last_commit=$(git log -1 --pretty=format:"%h - %s (%an, %ar)" 2>/dev/null || echo 'unknown')
    log "Last commit: $last_commit"
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    log "Working directory status:"
    if git status --porcelain 2>/dev/null | head -20 >> "$LOG_FILE"; then
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        local changes_count=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')
        if [ "$changes_count" -gt 0 ]; then
            log "üìù Found $changes_count changed files"
            echo "üìù Changed files preview:" 
            git status --porcelain 2>/dev/null | head -5
            if [ "$changes_count" -gt 5 ]; then
                echo "   ... and $(($changes_count - 5)) more (see full log)"
            fi
        else
            log "‚úÖ Working directory is clean"
        fi
    else
        log "‚ùå Failed to get git status"
    fi
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π git status –¥–ª—è –ª–æ–≥–∞
    log "Detailed git status:"
    git status 2>&1 >> "$LOG_FILE" || log "‚ùå Failed to get detailed git status"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥–∏/–ø–æ–∑–∞–¥–∏ origin
    if git rev-parse --verify origin/$current_branch >/dev/null 2>&1; then
        local ahead=$(git rev-list --count origin/$current_branch..$current_branch 2>/dev/null || echo "0")
        local behind=$(git rev-list --count $current_branch..origin/$current_branch 2>/dev/null || echo "0")
        log "Sync status: $ahead commits ahead, $behind commits behind origin/$current_branch"
    else
        log "‚ö†Ô∏è  No remote tracking branch found"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    log "Recent commits:"
    git log --oneline -3 2>&1 >> "$LOG_FILE" || log "‚ùå Failed to get recent commits"
    
    log "========================================"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±–æ—Ä–∫–∏
check_build_status() {
    log "üîç Checking build status..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "$PROJECT_ROOT/build" ]; then
        log "‚ùå Build directory not found"
        return 1
    fi
    
    cd "$PROJECT_ROOT/build"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ game
    if [ -f "game" ] && [ -x "game" ]; then
        log "‚úÖ Executable 'game' found and is executable"
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–≥–¥–∞ –±—ã–ª —Å–æ–±—Ä–∞–Ω game
        local game_time=$(stat -f "%m" "game" 2>/dev/null || stat -c "%Y" "game" 2>/dev/null || echo "0")
        local cmake_time=0
        local src_time=0
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è CMakeLists.txt
        if [ -f "../CMakeLists.txt" ]; then
            cmake_time=$(stat -f "%m" "../CMakeLists.txt" 2>/dev/null || stat -c "%Y" "../CMakeLists.txt" 2>/dev/null || echo "0")
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ (–Ω–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π .cpp/.h —Ñ–∞–π–ª)
        if command -v find >/dev/null 2>&1; then
            local newest_src=$(find ../src -name "*.cpp" -o -name "*.h" 2>/dev/null | head -1)
            if [ -n "$newest_src" ]; then
                src_time=$(stat -f "%m" "$newest_src" 2>/dev/null || stat -c "%Y" "$newest_src" 2>/dev/null || echo "0")
            fi
        fi
        
        # –ï—Å–ª–∏ game –Ω–æ–≤–µ–µ —á–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏ CMakeLists.txt, —Ç–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        if [ "$game_time" -gt "$cmake_time" ] && [ "$game_time" -gt "$src_time" ]; then
            log "‚úÖ Executable 'game' is up-to-date"
            return 0
        else
            log "‚ö†Ô∏è  Executable 'game' exists but may be outdated"
            log "   game time: $(date -r $game_time 2>/dev/null || echo 'unknown')"
            log "   cmake time: $(date -r $cmake_time 2>/dev/null || echo 'unknown')"
            log "   source time: $(date -r $src_time 2>/dev/null || echo 'unknown')"
            return 2  # –ù—É–∂–Ω–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
        fi
    else
        log "‚ùå Executable 'game' not found or not executable"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ Starting smart test cycle"
    log "Project root: $PROJECT_ROOT"
    log "Command line args: $*"
    
    # –ü–æ–ª—É—á–∏—Ç—å git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
    get_git_info
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    local force_rebuild=false
    if [[ "$1" == "--force-rebuild" || "$1" == "-f" ]]; then
        force_rebuild=true
        log "üî® Force rebuild requested"
    fi
    
    # –ü–µ—Ä–µ–π—Ç–∏ –≤ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if [ ! -d "$PROJECT_ROOT/build" ]; then
        log "Creating build directory..."
        mkdir -p "$PROJECT_ROOT/build"
    fi
    
    cd "$PROJECT_ROOT/build"
    log "‚úÖ Changed to build directory: $(pwd)"
    
    local total_tests=3
    local passed_tests=0
    local failed_tests=0
    local skip_build=false
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    log "üîç [1/$total_tests] Checking build requirements..."
    
    if [ "$force_rebuild" = true ]; then
        log "üî® Force rebuild mode - skipping build check"
    else
        local build_status
        check_build_status
        build_status=$?
        
        case $build_status in
            0)
                log "‚úÖ Build is up-to-date, skipping rebuild"
                skip_build=true
                ((passed_tests++))
                ;;
            2)
                log "‚ö†Ô∏è  Build exists but outdated, rebuilding..."
                ;;
            *)
                log "‚ùå Build required"
                ;;
        esac
    fi
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ "$skip_build" = false ]; then
        log "üî® Building project..."
        if run_command "cmake .. && make -j8" "CMake configure and build"; then
            ((passed_tests++))
            log "‚úÖ Build completed successfully"
        else
            ((failed_tests++))
            log "‚ùå Build failed, but continuing with tests..."
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ game –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "game" ] || [ ! -x "game" ]; then
        log "‚ùå ERROR: Executable 'game' still not found after build!"
        log "Build directory contents:"
        ls -la >> "$LOG_FILE"
        ((failed_tests++))
    else
        log "‚úÖ Executable 'game' confirmed present and executable"
        log "   Size: $(ls -lh game | awk '{print $5}')"
        log "   Modified: $(ls -l game | awk '{print $6, $7, $8}')"
    fi
    
    # 2. Python tests
    log "üêç [2/$total_tests] Running Python tests..."
    if make help 2>/dev/null | grep -q "test "; then
        if run_command "make test" "Python tests"; then
            ((passed_tests++))
        else
            ((failed_tests++))
        fi
    else
        log "‚ùå 'make test' target not available"
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Python —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        if [ -f "../tests/run_all_tests.py" ]; then
            log "üîÑ Trying to run Python tests directly..."
            if run_command "python3 ../tests/run_all_tests.py" "Direct Python tests"; then
                ((passed_tests++))
            else
                ((failed_tests++))
            fi
        else
            ((failed_tests++))
        fi
    fi
    
    # 3. C++ tests
    log "‚öôÔ∏è [3/$total_tests] Running C++ tests..."
    if make help 2>/dev/null | grep -q "test-cpp"; then
        if run_command "make test-cpp" "C++ tests"; then
            ((passed_tests++))
        else
            ((failed_tests++))
        fi
    else
        log "‚ùå 'make test-cpp' target not available"
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å C++ —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        if [ -f "../tests/compile_and_run_tests.sh" ]; then
            log "üîÑ Trying to run C++ tests directly..."
            if run_command "cd ../tests && ./compile_and_run_tests.sh" "Direct C++ tests"; then
                ((passed_tests++))
            else
                ((failed_tests++))
            fi
        else
            ((failed_tests++))
        fi
    fi
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log "========================================"
    log "üìä FINAL RESULTS:"
    log "‚úÖ Passed: $passed_tests/$total_tests"
    log "‚ùå Failed: $failed_tests/$total_tests"
    
    if [ "$skip_build" = true ]; then
        log "‚ö° Build was skipped (executable up-to-date)"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ game
    if [ -f "game" ]; then
        log "üéÆ Game executable info:"
        log "   Path: $(pwd)/game"
        log "   Size: $(ls -lh game | awk '{print $5}')"
        log "   Last modified: $(ls -l game | awk '{print $6, $7, $8}')"
        log "   Permissions: $(ls -l game | awk '{print $1}')"
    fi
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
    cd "$PROJECT_ROOT"
    log "========================================"
    log "üìã FINAL GIT STATUS CHECK"
    log "========================================"
    git status --porcelain 2>&1 >> "$LOG_FILE" || log "‚ùå Failed to get final git status"
    
    echo ""
    echo "üìä SUMMARY:"
    echo "=================="
    echo "‚úÖ Passed: $passed_tests/$total_tests"
    echo "‚ùå Failed: $failed_tests/$total_tests"
    if [ "$skip_build" = true ]; then
        echo "‚ö° Build skipped (up-to-date)"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å git —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–Ω—Å–æ–ª–∏
    local current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')
    echo "üåø Git: $current_branch"
    local changes_count=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ')
    if [ "$changes_count" -gt 0 ]; then
        echo "üìù Uncommitted changes: $changes_count files"
    else
        echo "‚úÖ Working directory clean"
    fi
    
    echo "üìÑ Full log: $LOG_FILE"
    echo "üïí Finished: $(date '+%Y-%m-%d %H:%M:%S')"
    
    if [ -f "$PROJECT_ROOT/build/game" ]; then
        echo "üéÆ Game ready: $PROJECT_ROOT/build/game"
        echo ""
        echo "üí° Quick commands:"
        echo "   cd build && ./game_engine                    # Run the engine"
        echo "   cd build && ./game_engine --help            # Show help"
        echo "   cd build && ./game_engine --json -c help    # JSON output"
    fi
    
    return $failed_tests
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: $0 [options]"
    echo ""
    echo "Smart test runner that skips rebuild if 'game' executable is up-to-date."
    echo ""
    echo "This script:"
    echo "1. Collects Git repository information and status"
    echo "2. Checks if build/game exists and is newer than sources"
    echo "3. Skips rebuild if game is up-to-date (saves time!)"
    echo "4. Runs Python tests (make test or direct)"
    echo "5. Runs C++ tests (make test-cpp or direct)"
    echo "6. Logs all Git information for debugging"
    echo ""
    echo "Options:"
    echo "  --help, -h           Show this help message"
    echo "  --force-rebuild, -f  Force rebuild even if game exists"
    echo ""
    echo "Smart features:"
    echo "  ‚ö° Skips rebuild if build/game is newer than sources"
    echo "  üîç Checks file timestamps to determine if rebuild needed"
    echo "  üìã Falls back to direct test execution if make targets missing"
    echo "  üìÑ Detailed logging with absolute paths"
    echo "  üåø Git status tracking for debugging and history"
    echo ""
    echo "Git information logged:"
    echo "  - Current branch and last commit"
    echo "  - Working directory status (changed files)"
    echo "  - Sync status with remote (ahead/behind)"
    echo "  - Recent commit history"
    echo ""
    echo "Examples:"
    echo "  $0                    # Smart test (skip rebuild if not needed)"
    echo "  $0 --force-rebuild   # Force full rebuild and test"
    echo ""
    exit 0
fi

# –ó–∞–ø—É—Å–∫
echo "üöÄ Initializing smart test runner..."
echo "üí° Use --help for options, --force-rebuild to force rebuild"
echo ""

main "$@"
exit_code=$?

# –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
if [ -f "$LOG_FILE" ]; then
    log_lines=$(wc -l < "$LOG_FILE" 2>/dev/null || echo "0")
    echo "üìã Log created: $log_lines lines in $LOG_FILE"
    
    if [ $exit_code -ne 0 ]; then
        echo ""
        echo "‚ùå Issues found. Quick debug:"
        echo "   üîç Check errors: grep -A3 -B1 'FAILED\\|ERROR' \"$LOG_FILE\""
        echo "   üåø Check git: grep -A10 -B2 'GIT REPOSITORY STATUS' \"$LOG_FILE\""
        echo "   üìÑ Full log: $LOG_FILE"
    fi
else
    echo "‚ö†Ô∏è  Warning: Log file not created"
fi

exit $exit_code