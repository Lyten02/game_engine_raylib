cmake_minimum_required(VERSION 3.20)
project({{PROJECT_NAME}})

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find the main project's dependency paths
# The project structure is: GameEngine/output/ProjectName/
# Priority: 1) Global cache, 2) Main build/_deps, 3) Local _deps
set(SEARCH_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(DEPS_DIR "")
set(GAMEENGINE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../..")

# First, check for global cache
if(EXISTS "${GAMEENGINE_ROOT}/.deps_cache/_deps")
    set(DEPS_DIR "${GAMEENGINE_ROOT}/.deps_cache/_deps")
    message(STATUS "Found global dependencies cache")
else()
    # Search up to 5 levels up for the build/_deps directory
    foreach(i RANGE 5)
        if(EXISTS "${SEARCH_DIR}/build/_deps")
            set(DEPS_DIR "${SEARCH_DIR}/build/_deps")
            break()
        elseif(EXISTS "${SEARCH_DIR}/_deps")
            set(DEPS_DIR "${SEARCH_DIR}/_deps")
            break()
        endif()
        set(SEARCH_DIR "${SEARCH_DIR}/..")
    endforeach()
endif()

# Verify dependencies exist
if(NOT EXISTS "${DEPS_DIR}/raylib-build/raylib/libraylib.a")
    message(FATAL_ERROR "Dependencies not found. Searched for build/_deps but found: ${DEPS_DIR}. Run full build first in main project.")
endif()

message(STATUS "Using dependencies from: ${DEPS_DIR}")

# Add include directories from parent build
include_directories(
    ${DEPS_DIR}/raylib-src/src
    ${DEPS_DIR}/spdlog-src/include
    ${DEPS_DIR}/entt-src/src
    ${DEPS_DIR}/glm-src
    ${DEPS_DIR}/json-src/include
)

# Add executable
add_executable({{PROJECT_NAME}} main.cpp)

# Link directories
link_directories(
    ${DEPS_DIR}/raylib-build/raylib
    ${DEPS_DIR}/spdlog-build
)

# Link libraries directly from parent build
target_link_libraries({{PROJECT_NAME}} 
    ${DEPS_DIR}/raylib-build/raylib/libraylib.a
    ${DEPS_DIR}/spdlog-build/libspdlog.a
)

# Platform specific libraries
if(APPLE)
    target_link_libraries({{PROJECT_NAME}} 
        "-framework CoreVideo"
        "-framework IOKit" 
        "-framework Cocoa"
        "-framework GLUT"
        "-framework OpenGL"
    )
elseif(UNIX)
    target_link_libraries({{PROJECT_NAME}} 
        pthread
        GL
        m
        dl
        X11
    )
endif()

# Always copy game files to build directory (overwrite if exists)
file(COPY ${CMAKE_SOURCE_DIR}/assets DESTINATION ${CMAKE_BINARY_DIR})
file(COPY ${CMAKE_SOURCE_DIR}/scenes DESTINATION ${CMAKE_BINARY_DIR})
file(COPY ${CMAKE_SOURCE_DIR}/game_config.json DESTINATION ${CMAKE_BINARY_DIR})

# Also copy files next to the executable after build
add_custom_command(TARGET {{PROJECT_NAME}} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/assets $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/assets
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/scenes $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/scenes
    COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_SOURCE_DIR}/game_config.json $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/game_config.json
    COMMENT "Copying game resources to executable directory"
)