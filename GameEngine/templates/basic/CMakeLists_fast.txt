cmake_minimum_required(VERSION 3.20)
project({{PROJECT_NAME}})

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Use the parent project's dependency paths
set(PARENT_BUILD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../../")
set(DEPS_DIR "${PARENT_BUILD_DIR}/_deps")

# Add include directories from parent build
include_directories(
    ${DEPS_DIR}/raylib-src/src
    ${DEPS_DIR}/spdlog-src/include
    ${DEPS_DIR}/entt-src/src
    ${DEPS_DIR}/glm-src
    ${DEPS_DIR}/json-src/include
)

# Add executable
add_executable({{PROJECT_NAME}} main.cpp)

# Link directories
link_directories(
    ${DEPS_DIR}/raylib-build/raylib
    ${DEPS_DIR}/spdlog-build
)

# Link libraries directly from parent build
target_link_libraries({{PROJECT_NAME}} 
    ${DEPS_DIR}/raylib-build/raylib/libraylib.a
    ${DEPS_DIR}/spdlog-build/libspdlogd.a
)

# Platform specific libraries
if(APPLE)
    target_link_libraries({{PROJECT_NAME}} 
        "-framework CoreVideo"
        "-framework IOKit" 
        "-framework Cocoa"
        "-framework GLUT"
        "-framework OpenGL"
    )
elseif(UNIX)
    target_link_libraries({{PROJECT_NAME}} 
        pthread
        GL
        m
        dl
        X11
    )
endif()

# Copy assets and scenes to build directory
file(COPY ${CMAKE_SOURCE_DIR}/assets DESTINATION ${CMAKE_BINARY_DIR})
file(COPY ${CMAKE_SOURCE_DIR}/scenes DESTINATION ${CMAKE_BINARY_DIR})
file(COPY ${CMAKE_SOURCE_DIR}/game_config.json DESTINATION ${CMAKE_BINARY_DIR})

# Also copy files to the executable directory after build
add_custom_command(TARGET {{PROJECT_NAME}} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/assets $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/assets
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/scenes $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/scenes
    COMMAND ${CMAKE_COMMAND} -E copy
    ${CMAKE_SOURCE_DIR}/game_config.json $<TARGET_FILE_DIR:{{PROJECT_NAME}}>/game_config.json
    COMMENT "Copying game resources to executable directory"
)