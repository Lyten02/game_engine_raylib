{
  "summary": {
    "total": 25,
    "passed": 25,
    "failed": 0,
    "success_rate": 100.0,
    "total_time": 60.929,
    "parallel": true,
    "workers": "auto"
  },
  "results": [
    {
      "test_name": "test_resource_manager_headless",
      "test_file": "test_resource_manager_headless.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 3.353,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Headless Mode Tests ===\nTesting headless mode functionality...\nPASS: Headless mode default texture created correctly\nPASS: Headless mode texture loading works correctly\n\nTesting headless to graphics mode transition...\nPASS: Mode transition maintains texture consistency\n\nTesting concurrent access in headless mode...\nPASS: Concurrent headless access works correctly\n\nTesting headless mode performance...\nLoaded 10000 textures in headless mode in 0ms\nPASS: Headless mode performance is optimal\n\nTesting silent mode...\nTesting with silent mode OFF (you should see log messages):\n[2025-06-15 21:20:16.082] [info] [ResourceManager] Created dummy texture for headless mode\n[2025-06-15 21:20:16.082] [info] [ResourceManager] Headless mode: using dummy texture for 'test1'\n[2025-06-15 21:20:16.082] [warning] [ResourceManager] Texture 'nonexistent' not found - using default texture\n[2025-06-15 21:20:16.082] [info] [ResourceManager] Unloading all resources...\n\nTesting with silent mode ON (you should NOT see log messages):\nPASS: Silent mode works correctly\n\n=== All headless mode tests passed! ===\n"
    },
    {
      "test_name": "test_resource_manager_safety",
      "test_file": "test_resource_manager_safety.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 3.515,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Safety Tests ===\nTesting default texture validity...\nPASS: Default texture is always valid\nTesting no nullptr returns...\nPASS: No nullptr returns\nTesting missing textures return default...\nPASS: Missing textures return default\nTesting unload doesn't break defaults...\nPASS: Unload doesn't break defaults\nTesting pointer validity across lifetime...\nPASS: Pointer validity maintained across lifetime\n\nAll safety tests passed!\n"
    },
    {
      "test_name": "test_resource_manager_memory",
      "test_file": "test_resource_manager_memory.cpp",
      "category": "Memory",
      "status": "PASSED",
      "elapsed_seconds": 3.784,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Memory Safety Tests ===\nTesting default texture memory safety...\nPASS: Default texture singleton works correctly\nPASS: Multiple ResourceManager instances work correctly\nPASS: Proper cleanup on destruction\n\nTesting exception safety...\nPASS: Emergency fallback works correctly\n\nTesting for memory leaks...\nPASS: No apparent memory leaks (run with valgrind for confirmation)\n\nTesting null pointer safety...\nPASS: Null pointer safety checks passed\n\nTesting thread-safe destruction...\nPASS: Thread-safe destruction completed\n\n=== All memory safety tests passed! ===\n"
    },
    {
      "test_name": "test_resource_manager_threading",
      "test_file": "test_resource_manager_threading.cpp",
      "category": "Threading",
      "status": "PASSED",
      "elapsed_seconds": 3.998,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Threading Tests ===\nTesting concurrent access to getDefaultTexture()...\nCompleted 100000 texture accesses in 6ms\nPASS: No race conditions detected\n\nTesting concurrent texture loading...\nLoaded 1000 textures\nUnique textures in manager: 0\nPASS: Concurrent texture loading successful\n\nStress testing default texture initialization...\nPASS: Stress test completed successfully\n\n=== All threading tests passed! ===\n"
    },
    {
      "test_name": "test_async_build_threading",
      "test_file": "test_async_build_threading_stub.cpp",
      "category": "Threading",
      "status": "PASSED",
      "elapsed_seconds": 0.964,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "Running AsyncBuildSystem threading tests (stub version)...\n\nNote: This is a simplified version that tests threading primitives\nwithout requiring the full build system infrastructure.\n\nTesting thread-safe operations...\n✓ Thread-safe operations test passed\n\nTesting atomic status access...\n✓ Atomic status test passed\n\nTesting concurrent access patterns...\n✓ Concurrent access test passed\n  Read count: 34059\n  Write count: 100\n\n✅ All threading tests passed!\n"
    },
    {
      "test_name": "test_resource_manager_exception_safety",
      "test_file": "test_resource_manager_exception_safety.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 2.361,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Exception Safety Test (Minimal) ===\n\nTest 1: Basic exception safety...\n✓ Fallback texture created successfully\n\nTest 2: Concurrent exception safety...\n✓ All threads handled exceptions safely\n\nTest 3: Mode switching exception safety...\n✓ Texture remains consistent across mode switches\n\nTest 4: Non-existent resource handling...\n✓ Non-existent texture returns default\n\n✅ All exception safety tests passed!\n"
    },
    {
      "test_name": "test_resource_manager_simple",
      "test_file": "test_resource_manager_simple.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 2.370,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "Running ResourceManager memory test...\nInitial texture count: 0\nAfter 100 missing texture requests: 0 textures in map\nPASS: Map did not grow with missing texture requests\nAfter loading missing file: 0 textures in map\nPASS: Map did not grow when loading missing file\nPASS: Same default texture pointer returned for all missing textures\n\nAll tests passed! ResourceManager memory efficiency is working correctly.\n"
    },
    {
      "test_name": "test_default_texture_manager",
      "test_file": "test_default_texture_manager.cpp",
      "category": "Threading",
      "status": "PASSED",
      "elapsed_seconds": 2.502,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== Default Texture Manager Unit Tests ===\n\n=== Testing Headless Mode ===\n✓ Headless texture is not null\n✓ Headless texture has id=0\n✓ Headless texture has correct width\n✓ Headless texture has correct height\n✓ Headless texture has correct format\n\n=== Testing Graphics Mode ===\n✓ Graphics mode without RayLib returns valid texture\n✓ Graphics mode without RayLib uses dummy texture\n✓ Graphics texture has correct width\n✓ Graphics texture has correct height\n\n=== Testing Multi-threaded Access ===\n✓ All threads accessed texture successfully\n✓ All threads got the same default texture pointer\n✓ Multi-threaded access completed quickly\n\n=== Testing Memory Management ===\n✓ No crashes after multiple create/destroy cycles\n✓ Missing textures don't grow the map\n\n=== Testing Default Texture Consistency ===\n✓ All missing textures return same pointer\n✓ Default texture is consistent\n\n=== Test Summary ===\nPassed: 16\nFailed: 0\n"
    },
    {
      "test_name": "test_log_limiter_generic_keys",
      "test_file": "test_log_limiter_generic_keys.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 1.818,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "Testing LogLimiter with generic keys functionality\n\n\n--- Testing rate limiting with generic keys ---\n\nTest 1: Same message repeated (should see 3 then suppression)\n[2025-06-15 21:20:21.046] [console] [info] Test message 0\n[2025-06-15 21:20:21.047] [console] [info] Test message 1\n[2025-06-15 21:20:21.047] [console] [info] Test message 2\n\nTest 2: Different keys (each should get 3 messages)\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_0 - iteration 0\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_1 - iteration 1\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_0 - iteration 2\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_1 - iteration 3\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_0 - iteration 4\n[2025-06-15 21:20:21.047] [console] [warning] Message for key_1 - iteration 5\n\nTest 3: Thread safety (concurrent logging)\n[2025-06-15 21:20:21.047] [console] [error] Thread 1 - iteration 0\n[2025-06-15 21:20:21.047] [console] [error] Thread 1 - iteration 1\n[2025-06-15 21:20:21.047] [console] [error] Thread 3 - iteration 0\n\nTest 4: Generic key usage (like ResourceManager)\n[2025-06-15 21:20:21.047] [console] [warning] Texture not found: texture_0\n[2025-06-15 21:20:21.047] [console] [warning] Texture not found: texture_1\n[2025-06-15 21:20:21.047] [console] [warning] Texture not found: texture_2\n\n--- LogLimiter Statistics ---\nKey: 'test_key' - Count: 4\nKey: 'key_1' - Count: 4\nKey: 'key_0' - Count: 4\nKey: 'thread_key' - Count: 4\nKey: 'texture_not_found' - Count: 4\n\nTest completed. Check the output above to verify that:\n1. Generic keys are being used (no texture names in keys)\n2. Messages are limited to 3 occurrences per key type\n3. A debug message appears when limit is reached\n"
    },
    {
      "test_name": "test_config_depth",
      "test_file": "test_config_depth.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 3.350,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== Config Depth Validation Tests ===\n[2025-06-15 21:20:21.963] [info] Config::load - Configuration loaded from: test_config_depth.json\nRunning NormalDepthAllowed... PASSED\nRunning ExcessiveDepthRejected... [2025-06-15 21:20:21.964] [warning] Config::set - Invalid key format: l1.l2.l3.l4.l5.l6.l7.l8.l9.l10.l11.value\n[2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: l1.l2.l3.l4.l5.l6.l7.l8.l9.l10.l11.value\nPASSED\nRunning KeyValidationWorks... PASSED\nRunning BoundaryConditions... [2025-06-15 21:20:21.964] [warning] Config::set - Invalid key format: a.b.c.d.e.f.g.h.i.j.k\n[2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: a.b.c.d.e.f.g.h.i.j.k\n[2025-06-15 21:20:21.964] [warning] Config::set - Invalid key format: has..empty...parts\n[2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: has..empty...parts\nPASSED\nRunning TypesAtDepth... PASSED\nRunning CircularReferenceProtection... [2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: circular.test.next.next.next.next.next.next.next.next.next.next.next\nPASSED\nRunning PathCreationRespectsDepth... [2025-06-15 21:20:21.964] [warning] Config::set - Invalid key format: create.path.that.is.way.too.deep.to.be.allowed.beyond.limit\n[2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: create.path.that.is.way.too.deep.to.be.allowed.beyond.limit\nPASSED\nRunning CustomDepthLimits... [2025-06-15 21:20:21.964] [warning] Config::set - Invalid key format: z1.z2.z3.z4.z5.z6.z7.z8.z9.z10.z11\n[2025-06-15 21:20:21.964] [warning] Config::get - Invalid key format: z1.z2.z3.z4.z5.z6.z7.z8.z9.z10.z11\nPASSED\n\nAll tests passed!\n"
    },
    {
      "test_name": "test_resource_manager_threading_fix",
      "test_file": "test_resource_manager_threading_fix.cpp",
      "category": "Threading",
      "status": "PASSED",
      "elapsed_seconds": 3.537,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "[2025-06-15 21:20:24.555] [info] Starting ResourceManager thread safety test (fixed version)\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Created dummy texture for headless mode\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_1_0'\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Cannot unload texture 'texture_3_-1' - not found.\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Cannot unload texture 'texture_4_-1' - not found.\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Cannot unload texture 'texture_6_-1' - not found.\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_6_1'\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Cannot unload texture 'texture_2_-1' - not found.\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_5_0'\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Cannot unload texture 'texture_5_0' - not found.\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Texture 'texture_2_0' not found - using default texture\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Texture 'texture_1_0' not found - using default texture\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_1_2'\n[2025-06-15 21:20:24.556] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_2_1'\n[2025-06-15 21:20:24.556] [warning] [ResourceManager] Texture 'texture_1_0' not found - using default texture\n[2025-06-15 21:20:24.557] [warning] [ResourceManager] Texture 'texture_4_0' not found - using default texture\n[2025-06-15 21:20:24.557] [warning] [ResourceManager] Texture 'texture_4_0' not found - using default texture\n[2025-06-15 21:20:24.584] [info] Thread safety test completed in 28 ms\n[2025-06-15 21:20:24.584] [info] Total operations: 1000\n[2025-06-15 21:20:24.584] [info] Successful operations: 1000\n[2025-06-15 21:20:24.584] [info] Failed operations: 0\n[2025-06-15 21:20:24.584] [info] Final texture count: 0\n[2025-06-15 21:20:24.584] [info] \nTesting multiple ResourceManager instances...\n[2025-06-15 21:20:24.584] [info] Multiple instance test completed\n[2025-06-15 21:20:24.584] [info] Successful operations: 250\n[2025-06-15 21:20:24.584] [info] Failed operations: 0\n[2025-06-15 21:20:24.584] [info] \nTesting deadlock prevention with concurrent texture loading...\n[2025-06-15 21:20:24.584] [info] Deadlock prevention test completed in 0 ms\n[2025-06-15 21:20:24.584] [info] Successful operations: 400\n[2025-06-15 21:20:24.584] [info] Failed operations: 0\n[2025-06-15 21:20:24.584] [info] \nTesting double-check pattern correctness...\n[2025-06-15 21:20:24.584] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:24.585] [info] Double-check pattern test completed\n[2025-06-15 21:20:24.585] [info] Successful operations: 100\n[2025-06-15 21:20:24.585] [info] Failed operations: 0\n[2025-06-15 21:20:24.585] [info] Final unique texture count after double-check test: 0\n[2025-06-15 21:20:24.585] [info] \n✅ All thread safety tests passed!\n[2025-06-15 21:20:24.585] [info] [ResourceManager] Unloading all resources...\n"
    },
    {
      "test_name": "test_resource_manager_memory_fix",
      "test_file": "test_resource_manager_memory_fix.cpp",
      "category": "Memory",
      "status": "PASSED",
      "elapsed_seconds": 3.376,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "[2025-06-15 21:20:25.340] [info] Starting ResourceManager memory test (fixed version)\n[2025-06-15 21:20:25.340] [info] \nTest 1: Single instance lifecycle\n[2025-06-15 21:20:25.340] [info] Default texture size: 64x64\n[2025-06-15 21:20:25.340] [info] Single instance destroyed - all resources should be cleaned up\n[2025-06-15 21:20:25.340] [info] \nTest 2: Multiple instances in sequence\n[2025-06-15 21:20:25.340] [info] Cycle 1 completed\n[2025-06-15 21:20:25.340] [info] Cycle 2 completed\n[2025-06-15 21:20:25.340] [info] Cycle 3 completed\n[2025-06-15 21:20:25.340] [info] Cycle 4 completed\n[2025-06-15 21:20:25.340] [info] Cycle 5 completed\n[2025-06-15 21:20:25.340] [info] \nTest 3: Multiple simultaneous instances\n[2025-06-15 21:20:25.340] [info] Manager default texture: 64x64\n[2025-06-15 21:20:25.340] [info] Manager default texture: 64x64\n[2025-06-15 21:20:25.340] [info] Manager default texture: 64x64\n[2025-06-15 21:20:25.340] [info] All simultaneous instances destroyed\n[2025-06-15 21:20:25.340] [info] \nTest 4: Stress test - 100 creation/destruction cycles\n[2025-06-15 21:20:25.340] [info] Completed 0 cycles\n[2025-06-15 21:20:25.340] [info] Completed 20 cycles\n[2025-06-15 21:20:25.340] [info] Completed 40 cycles\n[2025-06-15 21:20:25.340] [info] Completed 60 cycles\n[2025-06-15 21:20:25.340] [info] Completed 80 cycles\n[2025-06-15 21:20:25.340] [info] \nTest 5: Dynamic allocation test\n[2025-06-15 21:20:25.340] [info] Dynamic allocation test completed\n[2025-06-15 21:20:25.340] [info] \nTest 6: Exception safety test\n[2025-06-15 21:20:25.340] [info] Default texture still works after errors: 64x64\n[2025-06-15 21:20:25.340] [info] \n✅ Memory test completed successfully!\n[2025-06-15 21:20:25.340] [info] No global cleanup function needed - all resources cleaned up automatically\n[2025-06-15 21:20:25.340] [info] \nTest complete. Run with valgrind or AddressSanitizer to verify no leaks:\n[2025-06-15 21:20:25.340] [info]   valgrind --leak-check=full ./test_resource_manager_memory_fix\n[2025-06-15 21:20:25.340] [info]   or compile with: -fsanitize=address -g\n"
    },
    {
      "test_name": "test_resource_manager_init_order",
      "test_file": "test_resource_manager_init_order.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 3.466,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "[2025-06-15 21:20:28.049] [info] GlobalResourceUser constructor - accessing ResourceManager\n[2025-06-15 21:20:28.050] [info] Default texture during static init: 64x64\n[2025-06-15 21:20:28.050] [info] Early init function called\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Created dummy texture for headless mode\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] Main function started - testing initialization order safety\n[2025-06-15 21:20:28.050] [info] \nTest 1: Global ResourceManager access\n[2025-06-15 21:20:28.050] [info] Global RM default texture: 64x64\n[2025-06-15 21:20:28.050] [info] ✅ Global ResourceManager works correctly\n[2025-06-15 21:20:28.050] [info] \nTest 2: Different initialization modes\n[2025-06-15 21:20:28.050] [info] Headless mode texture: 64x64 (id=0)\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] Graphics mode (no RayLib) texture: 64x64 (id=0)\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] \nTest 3: Thread-local ResourceManager\n[2025-06-15 21:20:28.050] [info] Thread-local RM texture: 64x64\n[2025-06-15 21:20:28.050] [info] Thread-local RM loaded textures: 0\n[2025-06-15 21:20:28.050] [info] \nTest 4: Multiple ResourceManagers with different states\n[2025-06-15 21:20:28.050] [info] RM1 texture: 64x64\n[2025-06-15 21:20:28.050] [info] RM2 texture: 64x64\n[2025-06-15 21:20:28.050] [info] RM3 texture: 64x64\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] [ResourceManager] Unloading all resources...\n[2025-06-15 21:20:28.050] [info] \nTest 5: Lazy initialization stress test\n[2025-06-15 21:20:28.050] [info] ✅ All 10 threads successfully accessed default texture\n[2025-06-15 21:20:28.050] [info] \n✅ All initialization order tests passed!\n[2025-06-15 21:20:28.050] [info] No static initialization order issues detected\n[2025-06-15 21:20:28.050] [info] GlobalResourceUser destructor\n"
    },
    {
      "test_name": "test_resource_manager_integration",
      "test_file": "test_resource_manager_integration.cpp",
      "category": "Integration",
      "status": "PASSED",
      "elapsed_seconds": 3.589,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Integration Test ===\n\n=== Testing Headless Mode ===\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Created dummy texture for headless mode\n✓ Default texture created correctly in headless mode\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Headless mode: using dummy texture for 'test_texture'\n✓ Texture loading returns default texture in headless mode\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Headless mode: using dummy texture for 'headless_tex_0'\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Headless mode: using dummy texture for 'headless_tex_1'\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Headless mode: using dummy texture for 'headless_tex_2'\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Headless mode: using dummy texture for 'headless_tex_3'\n✓ Multiple texture loads handled correctly in headless mode\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Unloading all resources...\n\n=== Testing Graphics Mode ===\n✓ Default texture created correctly in graphics mode\n[2025-06-15 21:20:28.927] [info] [ResourceManager] RayLib not initialized: using default texture for 'missing'\n✓ Missing texture returns default texture correctly\n[2025-06-15 21:20:28.927] [warning] [ResourceManager] Texture 'never_loaded' not found - using default texture\n✓ Getting non-existent texture returns default correctly\n[2025-06-15 21:20:28.927] [info] [ResourceManager] Unloading all resources...\n\n=== Testing Mode Transitions ===\n✓ Mode transition preserves default texture\n✓ Handles RayLib not initialized correctly\n\n=== Testing Concurrent Workflow ===\nConcurrent workflow completed in 1 ms\nSuccess: 80, Errors: 0\n✓ Concurrent workflow completed successfully\nRemaining textures after partial cleanup: 0\n✓ Resource cleanup working correctly\n\n=== Testing Error Recovery ===\n✓ Multiple instances handled correctly\n✓ Rapid creation/destruction handled correctly\n\n✅ All integration tests passed!\n"
    },
    {
      "test_name": "test_call_once_retry_behavior",
      "test_file": "test_call_once_retry_behavior.cpp",
      "category": "Threading",
      "status": "PASSED",
      "elapsed_seconds": 3.649,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "[2025-06-15 21:20:31.697] [info] Testing thread-safe default texture initialization...\n[2025-06-15 21:20:31.697] [info] \nTest 1: Single-threaded initialization\n[2025-06-15 21:20:31.698] [info] First access: texture id=0, size=64x64\n[2025-06-15 21:20:31.698] [info] ✅ Same texture returned on second access\n[2025-06-15 21:20:31.698] [info] \nTest 2: Multi-threaded concurrent access\n[2025-06-15 21:20:31.699] [info] Concurrent access completed in 1 ms\n[2025-06-15 21:20:31.699] [info] Success count: 100/100\n[2025-06-15 21:20:31.699] [info] ✅ All threads got the same texture pointer\n[2025-06-15 21:20:31.699] [info] \nTest 3: Rapid sequential access\n[2025-06-15 21:20:31.700] [info] ✅ 10,000 rapid accesses completed successfully\n[2025-06-15 21:20:31.700] [info] \nTest 4: Multiple ResourceManager instances\n[2025-06-15 21:20:31.700] [info] ✅ Each ResourceManager has its own default texture\n[2025-06-15 21:20:31.700] [info] \n✅ All thread-safe initialization tests passed!\n"
    },
    {
      "test_name": "test_memory_ordering",
      "test_file": "test_memory_ordering.cpp",
      "category": "Memory",
      "status": "PASSED",
      "elapsed_seconds": 3.798,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Memory Ordering Tests ===\nTesting acquire-release semantics for ARM compatibility...\nTesting basic memory ordering guarantees...\nPASS: 100 threads x 1000 iterations completed in 3ms\n\nTesting memory ordering under stress...\nPASS: Stress test with 10 managers and 200 threads completed successfully\n\nTesting memory barrier effectiveness...\nPASS: Single initialization verified across 10 managers with 100 threads each\nTotal successful accesses: 1000\n\nSimulating weak memory model behavior...\nPASS: Weak memory model simulation completed successfully\n\n=== All memory ordering tests passed! ===\nThe implementation is safe for weak memory model architectures.\n"
    },
    {
      "test_name": "test_build_system_basic",
      "test_file": "test_build_system_basic.cpp",
      "category": "Build",
      "status": "PASSED",
      "elapsed_seconds": 14.358,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== Build System Basic Tests ===\nTesting BuildSystem creation...\n✓ BuildSystem created successfully\nTesting AsyncBuildSystem creation...\n✓ AsyncBuildSystem created successfully\n✓ Initial status is Idle\n✓ Initial progress is 0%\nTesting BuildConfig creation...\n✓ Default BuildConfig created (Release)\n✓ Debug BuildConfig created\n✓ Default debug config created via factory\n✓ Default release config created via factory\nTesting build directory creation...\n[2025-06-15 21:20:32.799] [info] EnginePaths initialized with root: /Users/konstantin/Desktop/Code/GameEngineRayLib/GameEngine/tests\n[2025-06-15 21:20:32.801] [info] Created build directory: /Users/konstantin/Desktop/Code/GameEngineRayLib/GameEngine/tests/output/TestBuildSystemProject_1750011632\n✓ Build directory created successfully\nTesting BuildConfig JSON serialization...\n✓ BuildConfig JSON serialization works\n\nAll tests passed! ✓\n"
    },
    {
      "test_name": "test_exception_safety",
      "test_file": "test_exception_safety.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 3.518,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Exception Safety Tests ===\nTesting basic exception safety...\n[2025-06-15 21:20:35.215] [info] [ResourceManager] Created dummy texture for headless mode\nPASS: Headless mode texture creation is exception safe\n[2025-06-15 21:20:35.215] [info] [ResourceManager] Unloading all resources...\nPASS: Multiple managers handled safely\n\nTesting concurrent exception safety...\nSuccess count: 5000\nException count: 0\nPASS: Concurrent access handled safely\n\nTesting resource lifetime safety...\nPASS: Resource lifetime managed safely\n\nTesting exception propagation...\nPASS: No spurious exceptions\n[2025-06-15 21:20:35.217] [info] [ResourceManager] Unloading all resources...\n\nTesting behavior under memory pressure...\nPASS: Created 100 managers successfully\nPASS: Clean destruction of all managers\n\nTesting nested exception handling...\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_5_tex_0'\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_4_tex_0'\n[2025-06-15 21:20:35.218] [warning] [ResourceManager] Texture 'thread_5_tex_0' not found - using default texture\n[2025-06-15 21:20:35.218] [warning] [ResourceManager] Texture 'thread_4_tex_0' not found - using default texture\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_1_tex_0'\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_0_tex_0'\n[2025-06-15 21:20:35.218] [warning] [ResourceManager] Texture 'thread_0_tex_0' not found - using default texture\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_2_tex_0'\n[2025-06-15 21:20:35.218] [warning] [ResourceManager] Texture 'thread_6_tex_0' not found - using default texture\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_5_tex_1'\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Headless mode: using dummy texture for 'thread_4_tex_1'\n[2025-06-15 21:20:35.218] [warning] [ResourceManager] Texture 'thread_1_tex_0' not found - using default texture\nPASS: Nested operations handled safely\n[2025-06-15 21:20:35.218] [info] [ResourceManager] Unloading all resources...\n\n=== All exception safety tests passed! ===\nThe ResourceManager provides strong exception safety guarantees.\n"
    },
    {
      "test_name": "test_resource_functionality",
      "test_file": "test_resource_functionality.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 2.579,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Deep Functionality Tests ===\n\nTesting ResourceManager texture functionality...\nTest 1: Default texture validity...\n[2025-06-15 21:20:35.378] [warning] [ResourceManager] Texture 'missing1' not found - using default texture\n[2025-06-15 21:20:35.379] [info] [ResourceManager] Created dummy texture for headless mode\n✅ Default texture is valid\n\nTest 2: Consistency of default texture...\n[2025-06-15 21:20:35.379] [warning] [ResourceManager] Texture 'missing1' not found - using default texture\n✅ Same missing name returns same pointer\n\nTest 3: All missing textures use same default...\n[2025-06-15 21:20:35.379] [warning] [ResourceManager] Texture 'missing2' not found - using default texture\n✅ Different missing names return same default texture\n\nTest 4: Map doesn't grow with missing textures...\n[2025-06-15 21:20:35.379] [warning] [ResourceManager] Texture 'missing_texture_0' not found - using default texture\n[2025-06-15 21:20:35.379] [warning] [ResourceManager] Texture 'missing_texture_1' not found - using default texture\n✅ Map size remains 0 after 100 missing texture requests\n\nTest 5: Loading texture in headless mode...\n[2025-06-15 21:20:35.379] [info] [ResourceManager] Headless mode: using dummy texture for 'test_texture'\n✅ Loading texture in headless returns default without storing\n\n✅ All texture functionality tests passed!\n[2025-06-15 21:20:35.379] [info] [ResourceManager] Unloading all resources...\n\nTesting mode switching...\nTest 1: Get texture in headless mode...\n✅ Headless mode returns dummy texture\n\nTest 2: Switch to normal mode...\n✅ Mode switch handled gracefully\n\n✅ Mode switching tests passed!\n\nTesting memory efficiency...\nMaking 10000 missing texture requests...\nMap size after 10000 requests: 0\n✅ Memory efficient - no growth with missing textures\n\n🎉 All deep functionality tests passed!\n"
    },
    {
      "test_name": "test_resource_memory",
      "test_file": "test_resource_memory.cpp",
      "category": "Memory",
      "status": "PASSED",
      "elapsed_seconds": 2.445,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== ResourceManager Memory Test ===\nTest: Default texture created only once\n✓ All missing textures point to the same default texture\nTest: Memory not growing with missing texture requests\n  Loaded textures: 0\n  Unique textures: 0\n✓ Memory did not grow despite 100 missing texture requests\nTest: Real textures are allocated separately\n  Loaded textures: 0\n  Unique textures: 0\n✓ Texture allocation works correctly in headless mode\nTest: Unloading textures does not delete default\n✓ Default texture survives unload operations\n\n✅ All memory tests passed!\n"
    },
    {
      "test_name": "test_resource_pointer_consistency",
      "test_file": "test_resource_pointer_consistency.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 2.452,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== Testing ResourceManager pointer consistency ===\nTest 1: Missing texture pointer consistency...\n  ✓ All missing textures return same pointer: 0x139f08440\nTest 2: Map size check...\n  ✓ Map remains empty (size: 0)\nTest 3: loadTexture with missing file...\n  ✓ loadTexture returns same default pointer\n  ✓ Map still empty after loadTexture\nTest 5: Repeated requests consistency...\n  ✓ 100 repeated requests returned same pointer\nTest 6: Many different missing textures...\n  ✓ 1000 different missing textures: same pointer, map size 0\n\n=== ALL TESTS PASSED! ===\nMemory leak is fixed: missing textures don't grow the map\n"
    },
    {
      "test_name": "test_resource_simple",
      "test_file": "test_resource_simple.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 2.389,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "Initial texture count: 0\nAfter 10 missing requests: 0\nAfter loading missing file: 0\nSUCCESS: All tests passed!\nMap size remained at: 0\n"
    },
    {
      "test_name": "test_resource_manager_pointer_stability",
      "test_file": "test_resource_manager_pointer_stability.cpp",
      "category": "Resource",
      "status": "PASSED",
      "elapsed_seconds": 3.088,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "ResourceManager Pointer Stability Test\n\nThis test demonstrates why storing Texture2D directly\nin std::unordered_map is dangerous.\n\n=== Testing ResourceManager Pointer Stability ===\n\nStep 1: Loading initial textures and storing pointers...\n[2025-06-15 21:20:40.351] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_0'\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Created dummy texture for headless mode\n  Loaded texture_0 at address: 0x1440041b0\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_1'\n  Loaded texture_1 at address: 0x1440041b0\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_2'\n  Loaded texture_2 at address: 0x1440041b0\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_3'\n  Loaded texture_3 at address: 0x1440041b0\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Headless mode: using dummy texture for 'texture_4'\n  Loaded texture_4 at address: 0x1440041b0\n  Loaded texture_5 at address: 0x1440041b0\n  Loaded texture_6 at address: 0x1440041b0\n  Loaded texture_7 at address: 0x1440041b0\n  Loaded texture_8 at address: 0x1440041b0\n  Loaded texture_9 at address: 0x1440041b0\n\nStep 2: Verifying initial pointers...\n[2025-06-15 21:20:40.352] [warning] [ResourceManager] Texture 'texture_0' not found - using default texture\n[2025-06-15 21:20:40.352] [warning] [ResourceManager] Texture 'texture_1' not found - using default texture\n[2025-06-15 21:20:40.352] [warning] [ResourceManager] Texture 'texture_2' not found - using default texture\n[2025-06-15 21:20:40.352] [warning] [ResourceManager] Texture 'texture_3' not found - using default texture\n[2025-06-15 21:20:40.352] [warning] [ResourceManager] Texture 'texture_4' not found - using default texture\n  ✓ All pointers are currently valid\n\nStep 3: Loading many textures to stress the map...\n  Initial texture count: 0\n  Final texture count: 0\n\nStep 4: Checking if original pointers are still valid...\n  texture_0: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_1: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_2: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_3: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_4: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_5: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_6: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_7: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_8: stored=0x1440041b0, current=0x1440041b0 ✓\n  texture_9: stored=0x1440041b0, current=0x1440041b0 ✓\n\n⚠️  Pointers remained valid in this run, but the bug still exists!\nThe C++ standard does NOT guarantee this behavior.\n[2025-06-15 21:20:40.352] [info] [ResourceManager] Unloading all resources...\n\n\n=== Testing Concurrent Access Danger ===\nPlayer texture initially at: 0x142e046e0\n\nResults:\n  Original player texture pointer: 0x142e046e0\n  Current player texture pointer: 0x142e046e0\n  Successful accesses: 34615\n  Crashes caught: 0\n\n\n=== Real World Scenario ===\nGame started with critical textures:\n  UI texture at: 0x1440041b0\n  Font texture at: 0x1440041b0\n\nSimulating gameplay with dynamic content...\n\nAfter level 5:\n  UI pointer still at: 0x1440041b0 ✓\n  Font pointer still at: 0x1440041b0 ✓\n\nFinal check after all levels:\n  UI texture: ✓ Still valid\n  Font texture: ✓ Still valid\n\n\n=== Summary ===\nThe current ResourceManager implementation has a CRITICAL bug:\n- Pointers returned by loadTexture() and getTexture() can become invalid\n- This happens when std::unordered_map rehashes (unpredictable)\n- Game code storing these pointers will crash or corrupt memory\n- The fix: Change storage to std::unique_ptr<Texture2D>\n"
    },
    {
      "test_name": "test_console_autocompletion",
      "test_file": "test_console_autocompletion.cpp",
      "category": "Unit",
      "status": "PASSED",
      "elapsed_seconds": 8.366,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "=== Testing Console Basic Autocompletion ===\n✓ Basic autocompletion test passed\n=== Testing Console Memory Cleanup ===\n✓ Memory cleanup test passed\n=== Testing Console Integration ===\n✓ Console integration test passed\n\n✅ All console autocompletion tests passed!\n"
    },
    {
      "test_name": "test_engine_init",
      "test_file": "test_engine_init.cpp",
      "category": "Integration",
      "status": "PASSED",
      "elapsed_seconds": 56.179,
      "return_code": 0,
      "worker_id": 0,
      "timestamp": 0,
      "success": true,
      "output": "🧪 Running Engine initialization tests...\n========================================\n\n📋 engine_basic_initialization\n  Testing basic initialization...\n[2025-06-15 21:21:12.533] [info] EnginePaths initialized with root: /Users/konstantin/Desktop/Code/GameEngineRayLib/GameEngine/tests\n  ✅ Basic initialization test passed\n\n📋 engine_headless_mode\n  Testing headless mode...\n  ✅ Headless mode test passed\n\n📋 engine_multiple_init_shutdown\n  Testing multiple init/shutdown cycles...\n  ✅ Multiple init/shutdown test passed\n\n📋 engine_destructor_safety\n  Testing destructor safety...\n  ✅ Destructor safety test passed\n\n📋 engine_scene_management\n  Testing scene management...\n  ✅ Scene management test passed\n\n📋 engine_memory_stress\n  Testing memory stress...\n  ✅ Memory stress test passed\n\n========================================\nResults: 6 passed, 0 failed\n✅ All tests passed!\n"
    }
  ]
}
